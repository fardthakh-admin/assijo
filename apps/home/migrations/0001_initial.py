# Generated by Django 3.1.14 on 2024-10-16 14:59

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='EnergyLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('energy_result', models.CharField(max_length=40)),
            ],
        ),
        migrations.CreateModel(
            name='Farm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('farmName', models.CharField(default='MyFarm', max_length=200)),
                ('owner', models.IntegerField()),
                ('latitude', models.CharField(blank=True, max_length=200, null=True)),
                ('longitude', models.CharField(blank=True, max_length=200, null=True)),
                ('polygon', models.TextField(blank=True, default='')),
            ],
        ),
        migrations.CreateModel(
            name='Sensor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', models.CharField(max_length=30)),
                ('type', models.CharField(max_length=30)),
                ('category', models.CharField(max_length=30)),
                ('latitude', models.CharField(blank=True, max_length=200, null=True)),
                ('longitude', models.CharField(blank=True, max_length=200, null=True)),
                ('unit', models.CharField(blank=True, default='Sensor Default Unit', max_length=200, null=True)),
                ('name', models.CharField(blank=True, max_length=200, null=True)),
                ('farm', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='home.farm')),
            ],
        ),
        migrations.CreateModel(
            name='Title',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=60)),
            ],
        ),
        migrations.CreateModel(
            name='Tree',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', models.CharField(max_length=100)),
                ('type', models.CharField(max_length=30)),
                ('time', models.CharField(max_length=30)),
                ('state', models.CharField(max_length=30)),
                ('latitude', models.CharField(blank=True, max_length=200, null=True)),
                ('longitude', models.CharField(blank=True, max_length=200, null=True)),
                ('farm', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='home.farm')),
            ],
        ),
        migrations.CreateModel(
            name='WeatherStation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('packet', models.CharField(blank=True, max_length=100, null=True)),
                ('location', models.CharField(max_length=100)),
                ('latitude', models.CharField(blank=True, max_length=200, null=True)),
                ('longitude', models.CharField(blank=True, max_length=200, null=True)),
                ('BattV_MinUnit', models.CharField(blank=True, max_length=100, null=True)),
                ('BattV_AvgUnit', models.CharField(blank=True, max_length=30, null=True)),
                ('PTemp_C_AvgUnit', models.CharField(blank=True, max_length=30, null=True)),
                ('BP_mmHg_AvgUnit', models.CharField(blank=True, max_length=30, null=True)),
                ('Rain_mm_TotUnit', models.CharField(blank=True, max_length=30, null=True)),
                ('AirTC_AvgUnit', models.CharField(blank=True, max_length=30, null=True)),
                ('AirTC_MaxUnit', models.CharField(blank=True, max_length=30, null=True)),
                ('AirTC_TMxUnit', models.CharField(blank=True, max_length=30, null=True)),
                ('AirTC_MinUnit', models.CharField(blank=True, max_length=30, null=True)),
                ('AirTC_TMnUnit', models.CharField(blank=True, max_length=30, null=True)),
                ('RHUnit', models.CharField(blank=True, max_length=30, null=True)),
                ('SlrkW_AvgUnit', models.CharField(blank=True, max_length=30, null=True)),
                ('SlrMJ_TotUnit', models.CharField(blank=True, max_length=30, null=True)),
                ('Visibility_m_AvgUnit', models.CharField(blank=True, max_length=30, null=True)),
                ('wind_speed_AVGUnit', models.CharField(blank=True, max_length=30, null=True)),
                ('farm', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='home.farm')),
            ],
        ),
        migrations.CreateModel(
            name='WaterTank',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('water_level', models.FloatField(default=0.0)),
                ('water_capacity', models.FloatField(default=100.0)),
                ('location', models.CharField(blank=True, max_length=40, null=True)),
                ('latitude', models.CharField(blank=True, max_length=200, null=True)),
                ('longitude', models.CharField(blank=True, max_length=200, null=True)),
                ('farm', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='home.farm')),
            ],
        ),
        migrations.CreateModel(
            name='WaterShare',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField(default=0)),
                ('unit', models.CharField(max_length=100)),
                ('time', models.CharField(max_length=30)),
                ('timestamp', models.CharField(max_length=30)),
                ('tree', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='water_share', to='home.tree')),
            ],
        ),
        migrations.CreateModel(
            name='WaterPump',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', models.CharField(max_length=40)),
                ('state', models.CharField(max_length=30)),
                ('latitude', models.CharField(blank=True, max_length=200, null=True)),
                ('longitude', models.CharField(blank=True, max_length=200, null=True)),
                ('farm', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='home.farm')),
            ],
        ),
        migrations.CreateModel(
            name='Valve',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', models.CharField(blank=True, max_length=40, null=True)),
                ('type', models.CharField(blank=True, max_length=30, null=True)),
                ('state', models.CharField(blank=True, max_length=30, null=True)),
                ('latitude', models.CharField(blank=True, max_length=200, null=True)),
                ('longitude', models.CharField(blank=True, max_length=200, null=True)),
                ('pulse', models.CharField(blank=True, max_length=30, null=True)),
                ('identifier', models.CharField(blank=True, max_length=30, null=True)),
                ('farm', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='home.farm')),
            ],
        ),
        migrations.CreateModel(
            name='StringResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('string_result', models.CharField(max_length=100)),
                ('timestamp', models.CharField(max_length=40)),
                ('name', models.CharField(max_length=40)),
                ('sensors', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='STRINGRESULT', to='home.sensor')),
                ('valves', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='vSTRINGRESULT', to='home.valve')),
                ('water_tanks', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='swatertank', to='home.watertank')),
            ],
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.FloatField(default=0.0)),
                ('unit', models.CharField(max_length=30)),
                ('timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('type', models.CharField(blank=True, max_length=30, null=True)),
                ('energy_level', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='energylevel', to='home.energylevel')),
                ('sensor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='number_results', to='home.sensor')),
                ('valve', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='vnumber_results', to='home.valve')),
                ('water_pump', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='waterpump', to='home.waterpump')),
                ('water_tank', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='watertank', to='home.watertank')),
            ],
        ),
        migrations.CreateModel(
            name='PacketResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('temperature', models.CharField(blank=True, max_length=100, null=True)),
                ('humidity', models.CharField(blank=True, max_length=30, null=True)),
                ('rainfall', models.CharField(blank=True, max_length=30, null=True)),
                ('wind_speed', models.CharField(blank=True, max_length=30, null=True)),
                ('timestamp', models.CharField(blank=True, max_length=30, null=True)),
                ('direction', models.CharField(blank=True, max_length=30, null=True)),
                ('visibility', models.CharField(blank=True, max_length=30, null=True)),
                ('solar_radiation', models.CharField(blank=True, max_length=30, null=True)),
                ('BattV_Min', models.CharField(blank=True, max_length=100, null=True)),
                ('BattV_Avg', models.CharField(blank=True, max_length=30, null=True)),
                ('PTemp_C_Avg', models.CharField(blank=True, max_length=30, null=True)),
                ('BP_mmHg_Avg', models.CharField(blank=True, max_length=30, null=True)),
                ('Rain_mm_Tot', models.CharField(blank=True, max_length=30, null=True)),
                ('AirTC_Avg', models.CharField(blank=True, max_length=30, null=True)),
                ('AirTC_Max', models.CharField(blank=True, max_length=30, null=True)),
                ('AirTC_TMx', models.CharField(blank=True, max_length=30, null=True)),
                ('AirTC_Min', models.CharField(blank=True, max_length=30, null=True)),
                ('AirTC_TMn', models.CharField(blank=True, max_length=30, null=True)),
                ('RH', models.CharField(blank=True, max_length=30, null=True)),
                ('SlrkW_Avg', models.CharField(blank=True, max_length=30, null=True)),
                ('SlrMJ_Tot', models.CharField(blank=True, max_length=30, null=True)),
                ('Visibility_m_Avg', models.CharField(blank=True, max_length=30, null=True)),
                ('wind_speed_AVG', models.CharField(blank=True, max_length=30, null=True)),
                ('BattV_MinUnit', models.CharField(blank=True, max_length=100, null=True)),
                ('BattV_AvgUnit', models.CharField(blank=True, max_length=30, null=True)),
                ('PTemp_C_AvgUnit', models.CharField(blank=True, max_length=30, null=True)),
                ('BP_mmHg_AvgUnit', models.CharField(blank=True, max_length=30, null=True)),
                ('Rain_mm_TotUnit', models.CharField(blank=True, max_length=30, null=True)),
                ('AirTC_AvgUnit', models.CharField(blank=True, max_length=30, null=True)),
                ('AirTC_MaxUnit', models.CharField(blank=True, max_length=30, null=True)),
                ('AirTC_TMxUnit', models.CharField(blank=True, max_length=30, null=True)),
                ('AirTC_MinUnit', models.CharField(blank=True, max_length=30, null=True)),
                ('AirTC_TMnUnit', models.CharField(blank=True, max_length=30, null=True)),
                ('RHUnit', models.CharField(blank=True, max_length=30, null=True)),
                ('SlrkW_AvgUnit', models.CharField(blank=True, max_length=30, null=True)),
                ('SlrMJ_TotUnit', models.CharField(blank=True, max_length=30, null=True)),
                ('Visibility_m_AvgUnit', models.CharField(blank=True, max_length=30, null=True)),
                ('wind_speed_AVGUnit', models.CharField(blank=True, max_length=30, null=True)),
                ('weather_station', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='weather_station', to='home.weatherstation')),
            ],
        ),
        migrations.CreateModel(
            name='OfflineScenario',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('target_parameter', models.CharField(max_length=100)),
                ('condition', models.CharField(max_length=40)),
                ('action', models.CharField(max_length=30)),
                ('time', models.CharField(max_length=30)),
                ('unit', models.CharField(max_length=30)),
                ('target', models.CharField(max_length=100)),
                ('priority', models.CharField(max_length=30)),
                ('farm', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='home.farm')),
            ],
        ),
        migrations.CreateModel(
            name='home_user',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('farm_id', models.IntegerField(blank=True, null=True)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='homeuser_set', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='homeuser_set', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Gateway',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=30)),
                ('farm', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='home.farm')),
            ],
        ),
        migrations.AddField(
            model_name='energylevel',
            name='water_pump',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='water_pump', to='home.waterpump'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('farm', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='home.farm')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
